{"version":3,"sources":["components/main.jsx","letterboxd/letterboxd_rss.js","components/loading.jsx","components/input.jsx","components/footer.jsx","components/poster.jsx","App.js","index.js"],"names":["Main","_ref","responses","currentResponseIndex","setCurrentResponseIndex","useEffect","console","log","length","currentResponse","description","review","delay","timer","setTimeout","nextIndex","clearTimeout","React","createElement","className","Typewriter","onInit","typewriter","typeString","concat","title","callFunction","start","options","autoStart","loop","readRSS","async","username","url","response","fetch","xmlText","text","parser","DOMParser","items","parseFromString","querySelectorAll","Array","from","filter","item","querySelector","textContent","includes","map","split","rating","watchedDate","htmlContent","reviewParagraphs","meaningfulReview","reduce","acc","p","trim","startsWith","push","join","imgSrc","src","error","Loading","InputFunction","onResponsesUpdate","setUserName","useState","setResponses","isLoading","setIsLoading","inputVisible","setInputVisible","textFieldVisible","setTextFieldVisible","animateOut","setAnimateOut","errorMessage","setErrorMessage","sendToChatGPT","useCallback","promises","rssData","axios","post","prompt","data","updatedResponses","Promise","all","fetchData","result","handleFadeOut","id","onClick","handleButtonClick","handleInitialClick","placeholder","type","value","onChange","e","target","autoFocus","Footer","aria-label","rel","href","xmlns","width","height","viewBox","d","Poster","currentIndex","refs","useRef","current","_","i","_refs$current$i","createRef","scrollIntoView","behavior","inline","alt","index","key","ref","App","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.4f273830.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport Typewriter from 'typewriter-effect';\r\nimport './main.css';\r\n\r\nconst Main = ({ responses, currentResponseIndex, setCurrentResponseIndex }) => {\r\n    useEffect(() => {\r\n        console.log(\"Current Index: \", currentResponseIndex);\r\n        console.log(\"Responses: \", responses);\r\n\r\n        if (responses && responses.length > 0 && responses[currentResponseIndex]) {\r\n            const currentResponse = responses[currentResponseIndex];\r\n            console.log(\"Current Response: \", currentResponse);\r\n            if (currentResponse && currentResponse.description && currentResponse.review !== \"No review\") {\r\n                const delay = currentResponse.description.length * 50 + 1000;\r\n                const timer = setTimeout(() => {\r\n                    let nextIndex = (currentResponseIndex + 1) % responses.length;\r\n                    while (responses[nextIndex].review === \"No review\" && nextIndex !== currentResponseIndex) {\r\n                        nextIndex = (nextIndex + 1) % responses.length;\r\n                    }\r\n                    setCurrentResponseIndex(nextIndex);\r\n                }, delay);\r\n\r\n                return () => clearTimeout(timer);\r\n            }\r\n        }\r\n    }, [currentResponseIndex, responses, setCurrentResponseIndex]);\r\n\r\n    const currentResponse = responses && responses[currentResponseIndex];\r\n\r\n    return (\r\n        <div className=\"typewriter-container\">\r\n            {currentResponse && currentResponse.review !== \"No review\" && (\r\n                <Typewriter\r\n                    onInit={(typewriter) => {\r\n                        typewriter.typeString(`${currentResponse.title}: ${currentResponse.description}`)\r\n                            .callFunction(() => {\r\n                                if (currentResponseIndex === responses.length - 1) {\r\n                                    setCurrentResponseIndex(0);\r\n                                }\r\n                            })\r\n                            .start();\r\n                    }}\r\n                    options={{\r\n                        delay: 50,\r\n                        autoStart: true,\r\n                        loop: false,\r\n                    }}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Main;\r\n","async function readRSS(username) {\r\n  const url = `https://letterboxd.com/${username}/rss/`;\r\n  try {\r\n    const response = await fetch(url);\r\n    const xmlText = await response.text();\r\n    const parser = new DOMParser();\r\n    const xmlDoc = parser.parseFromString(xmlText, \"application/xml\");\r\n    const items = xmlDoc.querySelectorAll(\"item\");\r\n\r\n    return Array.from(items).filter(item => {\r\n      const link = item.querySelector(\"link\") ? item.querySelector(\"link\").textContent : \"\";\r\n      return !link.includes(\"/list/\");\r\n    }).map(item => {\r\n      const fullTitle = item.querySelector(\"title\") ? item.querySelector(\"title\").textContent : \"No title\";\r\n      const title = fullTitle.split(',')[0]; \r\n      const rating = item.querySelector(\"*|memberRating\") ? item.querySelector(\"*|memberRating\").textContent : \"No rating\";\r\n      const watchedDate = item.querySelector(\"*|watchedDate\") ? item.querySelector(\"*|watchedDate\").textContent : \"No date\";\r\n      \r\n      const description = item.querySelector(\"description\") ? item.querySelector(\"description\").textContent : \"No review\";\r\n      const htmlContent = parser.parseFromString(description, \"text/html\");\r\n      const reviewParagraphs = htmlContent.querySelectorAll(\"p\");\r\n\r\n      const meaningfulReview = Array.from(reviewParagraphs).reduce((acc, p) => {\r\n        const text = p.textContent.trim();\r\n        if (text && !text.startsWith(\"Watched on\") && text !== \"No review\") { \r\n          acc.push(text);\r\n        }\r\n        return acc;\r\n      }, []);\r\n\r\n      const reviewText = meaningfulReview.length > 0 ? meaningfulReview.join(\"\\n\") : \"No review\";\r\n      const imgSrc = htmlContent.querySelector(\"img\") ? htmlContent.querySelector(\"img\").src : \"No image\";\r\n\r\n      return { title, rating, review: reviewText, imgSrc, watchedDate };\r\n    });\r\n  } catch (error) {\r\n    console.error('Failed to fetch RSS data:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport default readRSS;\r\n","import React from 'react';\r\nimport './loading.css'; \r\n\r\nfunction Loading() {\r\n    return (\r\n        <div className='loading-container'>\r\n            <h2>Loading, please wait...</h2>\r\n            <span className=\"loader\"></span>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default Loading;\r\n","import React, { useState, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport readRSS from '../letterboxd/letterboxd_rss';\r\nimport Loading from './loading';\r\nimport Main from './main';\r\nimport './input.css';\r\n\r\nconst API_URL = 'http://localhost:8000/chat';\r\n\r\nconst InputFunction = ({ onResponsesUpdate }) => {\r\n    const [username, setUserName] = useState(\"\");\r\n    const [responses, setResponses] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [inputVisible, setInputVisible] = useState(true);\r\n    const [textFieldVisible, setTextFieldVisible] = useState(false);\r\n    const [animateOut, setAnimateOut] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n    const sendToChatGPT = useCallback(async (rssData) => {\r\n        try {\r\n            const promises = rssData.map(async (item) => {\r\n                let description = \"\";\r\n                try {\r\n                    if (item.review !== \"No review\") {\r\n                        const response = await axios.post(API_URL, {\r\n                            prompt: `${item.title} ${item.rating} ${item.review} You are a harsh movie critic. Write a sarcastic and mean quip making fun of the user about what they wrote. Make sure to provide the name of the movie you are making fun of to ensure proper context. Keep responses only up to 4 sentences.`\r\n                        });\r\n                        description = response.data;\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Failed to send data to ChatGPT:', error);\r\n                    description = 'Failed to process the data for this entry.';\r\n                }\r\n                return {\r\n                    imgSrc: item.imgSrc,\r\n                    title: item.title,\r\n                    review: item.review,\r\n                    rating: item.rating,\r\n                    watchedDate: item.watchedDate, \r\n                    description: description,\r\n                };\r\n            });\r\n    \r\n            const updatedResponses = await Promise.all(promises);\r\n            setResponses(updatedResponses);\r\n            onResponsesUpdate(updatedResponses);\r\n        } catch (error) {\r\n            console.error('General error in sending data to ChatGPT:', error);\r\n        }\r\n    }, [onResponsesUpdate]);\r\n    \r\n\r\n    const fetchData = useCallback(async () => {\r\n        if (!username) return;\r\n\r\n        try {\r\n            const result = await readRSS(username);\r\n            if (result.length > 0) {\r\n                setErrorMessage(\"\");\r\n                handleFadeOut();\r\n                setTimeout(() => setIsLoading(true), 500);\r\n                await sendToChatGPT(result);\r\n            } else {\r\n                setErrorMessage(\"Username not found.\");\r\n            }\r\n        } catch (error) {\r\n            console.error('Failed to fetch RSS data:', error);\r\n            setErrorMessage(\"Failed to fetch data. Please check your connection and try again.\");\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    }, [username, sendToChatGPT]);\r\n\r\n    const handleInitialClick = () => setTextFieldVisible(true);\r\n    const handleButtonClick = () => fetchData();\r\n\r\n    const handleFadeOut = () => {\r\n        setAnimateOut(true);\r\n        setTimeout(() => {\r\n            setInputVisible(false);\r\n            setTextFieldVisible(false);\r\n        }, 500);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {inputVisible && (\r\n                <div className={`animate-input ${animateOut ? 'fadeOut' : ''}`}>\r\n                    <div>\r\n                        <h1 id=\"textbox\">How Bad Is Your Movie Taste?</h1>\r\n                        <h2 id=\"textbox\">Our movie Artificial Intelligence will dissect and roast your horrible taste in film.</h2>\r\n                    </div>\r\n                    <button onClick={textFieldVisible ? handleButtonClick : handleInitialClick}>\r\n                        {textFieldVisible && username ? \"Submit\" : \"Get Started\"}\r\n                    </button>\r\n                    {textFieldVisible && (\r\n                        <div className=\"animate-input\">\r\n                            <input\r\n                                placeholder='Enter your Letterboxd username...'\r\n                                type=\"text\"\r\n                                value={username}\r\n                                onChange={(e) => setUserName(e.target.value)}\r\n                                autoFocus\r\n                            />\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            )}\r\n            {isLoading && <Loading />}\r\n            {errorMessage && <h2 className=\"error-message\">{errorMessage}</h2>}\r\n            {!inputVisible && <Main responses={responses} />}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default InputFunction;\r\n","import React from 'react';\r\nimport './footer.css';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer>\r\n      <div className=\"right\">\r\n        <a aria-label=\"GitHub\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/AndreasBoscariol/CinemaCritic\">\r\n          <svg className=\"main-social-svg\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z\"/></svg>\r\n        </a>\r\n      </div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { useEffect, useRef } from 'react';\r\nimport './poster.css';\r\n\r\nconst Poster = ({ response = [], currentIndex }) => {\r\n    // Initialize refs for each image element for scrolling purposes\r\n    const refs = useRef([]);\r\n    refs.current = response.map((_, i) => refs.current[i] ?? React.createRef());\r\n\r\n    useEffect(() => {\r\n        // Scroll the current image into the center of the viewport smoothly\r\n        if (refs.current[currentIndex] && refs.current[currentIndex].current) {\r\n            refs.current[currentIndex].current.scrollIntoView({\r\n                behavior: 'smooth',\r\n                inline: 'center'\r\n            });\r\n        }\r\n    }, [currentIndex]);\r\n\r\n    if (response.length === 0) return (\r\n        <div className='original-poster'>\r\n            {/* Default posters if no response is available */}\r\n            <img src=\"https://a.ltrbxd.com/resized/sm/upload/ji/5q/0k/rv/v6xrz4fr92KY1oNC3HsEvrsvR1n-0-2000-0-3000-crop.jpg?v=973d70bb0c\" alt=\"Seven Samurai\" />\r\n            <img src=\"https://a.ltrbxd.com/resized/film-poster/5/1/7/0/0/51700-12-angry-men-0-2000-0-3000-crop.jpg?v=b8aaf291a9\" alt=\"12 Angry Men\" />\r\n            <img src=\"https://a.ltrbxd.com/resized/film-poster/5/1/4/4/4/51444-pulp-fiction-0-2000-0-3000-crop.jpg?v=dee19a8077\" alt=\"Pulp Fiction\" />\r\n            <img src=\"https://a.ltrbxd.com/resized/film-poster/2/6/9/0/2690-apocalypse-now-0-2000-0-3000-crop.jpg?v=d4f99c09a3\" alt=\"Apocalypse Now\" />\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className='image-container'>\r\n            {/* Map response to images and apply highlight class to the current index */}\r\n            {response.map((item, index) => (\r\n                <img\r\n                    key={index}\r\n                    ref={refs.current[index]}\r\n                    src={item.imgSrc}\r\n                    alt={item.title}\r\n                    className={index === currentIndex ? 'highlight' : ''}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Poster;\r\n","import React, { useState } from 'react'; \r\nimport Main from './components/main';\r\nimport InputFunction from './components/input';\r\nimport Footer from './components/footer';\r\nimport Poster from './components/poster';\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n    const [responses, setResponses] = useState([]);\r\n    const [currentResponseIndex, setCurrentResponseIndex] = useState(0);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Main responses={responses} currentResponseIndex={currentResponseIndex} setCurrentResponseIndex={setCurrentResponseIndex} />\r\n            <InputFunction onResponsesUpdate={setResponses} />\r\n            <div id=\"orange\" className=\"stripe\"></div>\r\n            <div id=\"green\" className=\"stripe\"></div>\r\n            <div id=\"blue\" className=\"stripe\"></div>\r\n            <Poster response={responses} currentIndex={currentResponseIndex} />\r\n            <Footer />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n"],"sourceRoot":""}